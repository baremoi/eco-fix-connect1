
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardFooter } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { NewProjectDialog } from "@/components/projects/NewProjectDialog";
import { toast } from "sonner";
import { useAuth } from "@/lib/AuthContext";
import { MessageButton } from "@/components/messaging/MessageButton";

interface Project {
  id: string;
  title: string;
  description: string;
  status: "open" | "in_progress" | "completed" | "cancelled";
  created_at: string;
  budget_min?: number;
  budget_max?: number;
  location?: string;
  category?: string;
}

export default function Projects() {
  const { user: currentUser } = useAuth(); // eslint-disable-line @typescript-eslint/no-unused-vars
  const [projects, setProjects] = useState<Project[]>([
    {
      id: "1",
      title: "Kitchen Renovation",
      description: "Looking for someone to help renovate our kitchen with eco-friendly materials. Need help with planning, demolition, and installation.",
      status: "open",
      created_at: "2025-04-01T12:00:00Z",
      budget_min: 5000,
      budget_max: 8000,
      location: "Manchester",
      category: "Renovation"
    },
    {
      id: "2",
      title: "Garden Landscaping",
      description: "Need help transforming our garden into a sustainable space with native plants and water conservation features.",
      status: "in_progress",
      created_at: "2025-03-15T09:30:00Z",
      budget_min: 1500,
      budget_max: 3000,
      location: "Bristol",
      category: "Gardening"
    },
    {
      id: "3",
      title: "Solar Panel Installation",
      description: "Looking for a professional to install solar panels on our roof. We need consultation on the best setup for our home.",
      status: "completed",
      created_at: "2025-02-20T15:45:00Z",
      budget_min: 4000,
      budget_max: 7000,
      location: "Leeds",
      category: "Electrical"
    }
  ]);

  const [isNewProjectOpen, setIsNewProjectOpen] = useState(false);

  const handleCreateProject = (projectData: any) => {
    const newProject: Project = {
      id: `${projects.length + 1}`, // In a real app, this would be generated by the backend
      ...projectData,
      status: "open",
      created_at: new Date().toISOString()
    };
    
    setProjects([newProject, ...projects]);
    toast.success("Project created successfully!");
  };

  const getStatusBadgeClass = (status: Project['status']) => {
    switch (status) {
      case "open":
        return "bg-soft-blue text-blue-700";
      case "in_progress":
        return "bg-soft-yellow text-yellow-700";
      case "completed":
        return "bg-soft-green text-green-700";
      case "cancelled":
        return "bg-soft-red text-red-700";
    }
  };

  return (
    <div className="container mx-auto py-8">
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-6 gap-4">
        <div>
          <h1 className="text-2xl font-bold">Your Projects</h1>
          <p className="text-muted-foreground">
            Create and manage your home improvement projects
          </p>
        </div>
        <Button onClick={() => setIsNewProjectOpen(true)}>
          Create New Project
        </Button>
      </div>

      <div className="grid grid-cols-1 gap-6">
        {projects.map(project => (
          <Card key={project.id} className="overflow-hidden">
            <CardContent className="p-6">
              <div className="flex flex-col md:flex-row justify-between items-start gap-4">
                <div className="space-y-2 flex-1">
                  <div className="flex flex-wrap gap-2 items-center">
                    <h3 className="text-lg font-semibold">{project.title}</h3>
                    <Badge className={getStatusBadgeClass(project.status)}>
                      {project.status.replace('_', ' ').charAt(0).toUpperCase() + project.status.replace('_', ' ').slice(1)}
                    </Badge>
                  </div>
                  
                  <p className="text-sm text-muted-foreground line-clamp-2">
                    {project.description}
                  </p>
                  
                  <div className="flex flex-wrap gap-x-4 gap-y-2 text-sm">
                    {project.category && (
                      <div>
                        <span className="font-medium">Category:</span> {project.category}
                      </div>
                    )}
                    {project.location && (
                      <div>
                        <span className="font-medium">Location:</span> {project.location}
                      </div>
                    )}
                    {(project.budget_min !== undefined && project.budget_max !== undefined) && (
                      <div>
                        <span className="font-medium">Budget:</span> £{project.budget_min} - £{project.budget_max}
                      </div>
                    )}
                  </div>
                </div>
                
                <div className="flex flex-col gap-2 w-full md:w-auto">
                  <Button variant="outline" className="w-full md:w-auto">
                    View Details
                  </Button>
                </div>
              </div>
            </CardContent>
            
            {/* Only show message button in certain states */}
            {(project.status === "in_progress") && (
              <CardFooter className="bg-muted/40 px-6 py-3 flex justify-between">
                <span className="text-sm text-muted-foreground">
                  Connected with tradesperson
                </span>
                <MessageButton 
                  userId="tradesperson-id" // In a real app, this would be the tradesperson's ID
                  projectId={project.id}
                  variant="outline"
                  size="sm"
                />
              </CardFooter>
            )}
          </Card>
        ))}
      </div>

      <NewProjectDialog
        open={isNewProjectOpen}
        onOpenChange={setIsNewProjectOpen}
        onCreateProject={handleCreateProject}
      />
    </div>
  );
}
